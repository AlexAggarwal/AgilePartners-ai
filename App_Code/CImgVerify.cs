/// ************************************************************************
/// CImgVerify.cs - Random string generator and image convertor
/// Developed by Vadivel Kumar
/// vadivtk@yahoo.com
/// ************************************************************************

using System;
using System.Drawing.Imaging;
using System.Drawing;
using System.Drawing.Design;
using System.Drawing.Text;
using System.Security.Cryptography;
using System.Web.UI;
using System.Web;
using System.Drawing.Drawing2D;

namespace imgver.NumberGenerator
{
    /// <summary>
    /// Summary description for CImgVerify.
    /// This class can be used to generate dynamic generation of Alphanumeric strings
    /// and it can be displayed as images in the webbrowser.
    /// 
    /// Use this code at your own :). I didn't tested properly and I hope i can 
    /// release a final tested versions of this code in future.
    /// 
    /// Thanks Guys!!
    /// </summary>
    public class CImgVerify
    {
        /// <summary>
        /// The constructor will not do anything!
        /// </summary>
        public CImgVerify()
        { }

        /// <summary>
        /// The function <c>getRandomAlphaNumeric</c> will return the string
        /// generated by the <c>RandomNumberGenerator</c> class. This will be used
        /// to make the string value. The function will check whether the randomnly
        /// generated numerics are falling into 32 to 127 for making
        /// it as a character. If the value returned is not in the range
        /// then that we will be used as it is. By default, the randomnly generated number 
        /// array will hold 3 elements.
        /// </summary>
        /// <returns>string value, which is  the randomnly generated alphanumeric value</returns>
        public string getRandomAlphaNumeric()
        {
            string sRand = "";
            string guidResult = System.Guid.NewGuid().ToString();
            sRand = guidResult.Substring(0, 5);

            //RandomNumberGenerator rm;
            //rm = RandomNumberGenerator.Create();

            //byte[] data = new byte[3];

            //rm.GetNonZeroBytes(data);


            //string sTmp="";

            //for(int nCnt=0;nCnt<=data.Length-1;nCnt++)
            //{			
            //    int nVal = Convert.ToInt32(data.GetValue(nCnt));

            //    if(nVal > 32 && nVal < 127)
            //    {
            //        sTmp = Convert.ToChar(nVal).ToString();
            //    }
            //    else
            //    {
            //        sTmp = nVal.ToString();
            //    }

            //    sRand += sTmp.ToString();	
            //}

            return sRand;
        }

        /// <summary>
        /// Ooops!! I'm too tired to make documentation of this. I think, it is 
        /// possible to add more features to this function. 
        /// 
        /// Let me add doc. later after some time!
        /// </summary>
        /// <param name="sTextToImg">The text which has to be generated as a image</param>
        /// <returns></returns>
        /// 
        private Color _BackColor = new Color();


        public Bitmap generateImage(string sTextToImg)
        {
            //
            // Here, i haven't used any try..catch 
            //

            //PixelFormat pxImagePattern = PixelFormat.Format32bppArgb;
            PixelFormat pxImagePattern = PixelFormat.Format24bppRgb;
            Bitmap bmpImage = new Bitmap(1, 1, pxImagePattern);
            Font fntImageFont = new Font("Trebuchets", 16);
            Graphics gdImageGrp = Graphics.FromImage(bmpImage);

            float iWidth = gdImageGrp.MeasureString(sTextToImg, fntImageFont).Width;
            float iHeight = gdImageGrp.MeasureString(sTextToImg, fntImageFont).Height;

            bmpImage = new Bitmap((int)iWidth, (int)iHeight, pxImagePattern);

            gdImageGrp = Graphics.FromImage(bmpImage);


            //For gradinet background
            System.Drawing.Rectangle recTop =
                new System.Drawing.Rectangle(0, 0,Convert.ToInt16(iWidth), Convert.ToInt16(iHeight) / 2);
            System.Drawing.Rectangle recBottom =
                new System.Drawing.Rectangle(0, Convert.ToInt16(iHeight) / 2, Convert.ToInt16(iWidth), Convert.ToInt16(iHeight) / 2);
            System.Drawing.Drawing2D.LinearGradientBrush gradTopBrush =
                new System.Drawing.Drawing2D.LinearGradientBrush(recTop,
                System.Drawing.Color.FromArgb(75, 105, 133), System.Drawing.Color.FromArgb(75, 105, 133), System.Drawing.Drawing2D.LinearGradientMode.Vertical);
            System.Drawing.Drawing2D.LinearGradientBrush gradBottomBrush =
                new System.Drawing.Drawing2D.LinearGradientBrush(recBottom,
                System.Drawing.Color.FromArgb(75, 105, 133), System.Drawing.Color.FromArgb(75, 105, 133), System.Drawing.Drawing2D.LinearGradientMode.Vertical);

            gdImageGrp.FillRectangle(gradTopBrush, recTop);
            gdImageGrp.FillRectangle(gradBottomBrush, recBottom);

            //For solid backgorund
            //gdImageGrp.Clear(Color.DarkGray);          

            gdImageGrp.TextRenderingHint = TextRenderingHint.AntiAlias;

            string p = sTextToImg;
            Matrix m = new Matrix();
            Random r = new Random();
            for (int i = 0; i < p.Length; i++)
            {
                // reset matrix
                m.Reset();
                // rotate the matrix
                m.RotateAt(r.Next(-10, 10), new PointF(Convert.ToInt64(iWidth * (0.10 * i)), Convert.ToInt64(iHeight * 0.5)));
                // apply the transform
                gdImageGrp.Transform = m;

                //System.Drawing.Drawing2D.LinearGradientBrush brush = new System.Drawing.Drawing2D.LinearGradientBrush(new Rectangle(0, 0, Convert.ToInt16(iWidth), Convert.ToInt16(iHeight)), Color.Blue, Color.DarkRed, 2.2f, true);

                //g.DrawString(checkCode, font, new SolidBrush(Color.Red), 2, 2);
                // draw the text to the image
                gdImageGrp.DrawString(p[i].ToString(), fntImageFont, SystemBrushes.ActiveCaptionText, Convert.ToInt64(iWidth * (0.18 * i)), Convert.ToInt64(iHeight * 0.02));
                // reset the matrix for the graphics object
                gdImageGrp.ResetTransform();
            }
            //gdImageGrp.DrawString(sTextToImg,fntImageFont, new SolidBrush(Color.Red),0,0);
            gdImageGrp.Flush();

            return bmpImage;

        }
    }
}
